import { useAuth0 } from '@auth0/auth0-react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState } from 'react'
import DonationsChart from '../../components/profile/donations/donationsChart'
import DonationsTotals from '../../components/profile/donations/donationsTotal'
import DonationYearMenu from '../../components/profile/donations/yearMenu'
import { DonationList } from '../../components/lists/donationList/donationList'
import { Layout } from '../../components/profile/layout'
import { useApi } from '../../hooks/useApi'
import { AggregatedDonations, Donation } from '../../models'
import { LayoutPage } from '../../types'
import style from "../../styles/Donations.module.css";
import DonationsDistributionTable from '../../components/profile/donations/donationsDistributionTable'
import { Spinner } from '../../components/elements/spinner'

const Home: LayoutPage = () => {
  const { getAccessTokenSilently, user } = useAuth0();
  const router = useRouter()

  const { loading: aggregatedLoading, data: aggregatedDonations, error: aggregatedError } = useApi<AggregatedDonations[]>(
    `/donors/${user ? user["https://konduit.no/user-id"] : ""}/donations/aggregated`,
    "GET",
    "read:donations",
    getAccessTokenSilently
  );

  const { loading: donationsLoading, data: donations, error: donationsError } = useApi<Donation[]>(
    `/donors/${user ? user["https://konduit.no/user-id"] : ""}/donations/`,
    "GET",
    "read:donations",
    getAccessTokenSilently
  )

  if (aggregatedLoading || !aggregatedDonations || donationsLoading || !donations)
    return <Spinner />

  const yearsSet = new Set<number>()
  aggregatedDonations.forEach(el => yearsSet.add(el.year))
  const years = Array.from(yearsSet)
  const firstYear = Math.min(...years)
  const sum = aggregatedDonations.reduce((acc, curr) => router.query.year === curr.year.toString() || !router.query.year ? acc + parseFloat(curr.value) : acc,0)

  const periodText = typeof router.query.year !== "undefined" ?
    `I ${router.query.year} har du gitt` :
    `Siden ${firstYear} har du gitt`

  let distribution = typeof router.query.year !== "undefined" ?
    getYearlyDistribution(aggregatedDonations, parseInt(router.query.year as string)) :
    getTotalDistribution(aggregatedDonations)

  return (
    <>
      <Head>
        <title>Konduit. - Profil</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Donasjoner</h1>

      <DonationYearMenu years={Array.from(years)} selected={(router.query.year as string) || "total"} />

      <DonationsChart distribution={distribution}></DonationsChart>

      <div className={style.details}>
        <DonationsDistributionTable distribution={distribution}></DonationsDistributionTable>
        <DonationsTotals sum={sum} period={periodText} comparison={"Det er 234% sÃ¥ mye som en gjennomsnittlig giver"} />
      </div>
      {
        typeof router.query.year !== "undefined" ?
        <DonationList 
          donations={donations.filter(donation => new Date(donation.timestamp).getFullYear() === parseInt(router.query.year as string))}
          year={router.query.year as string} /> :
        years.sort((a,b) => b-a).map(year => 
          (<DonationList 
            donations={donations.filter(donation => new Date(donation.timestamp).getFullYear() === year)}
            key={year}
            year={year.toString()} />)
        )
      }
      {/* <Donations /> */}
    </>
  )
}

Home.layout = Layout
export default Home

const getTotalDistribution = (aggregated: AggregatedDonations[]): { org: string, sum: number }[] => {
  const distribution = []
  
  const summed = aggregated
    .reduce((acc: { [key: string]: number }, curr) => {
      if (curr.organization in acc) {
        acc[curr.organization] += parseFloat(curr.value)
      } else {
        acc[curr.organization] = parseFloat(curr.value)
      }
      return acc
    }, { })
  
  for (const key in summed) {
    distribution.push({ org: key, sum: summed[key] })
  }

  return distribution
}

const getYearlyDistribution = (aggregated: AggregatedDonations[], year: number): { org: string, sum: number }[] => {
  return aggregated
    .filter(el => el.year === year)
    .map(el => ({ org: el.organization, sum: parseFloat(el.value) }))
}