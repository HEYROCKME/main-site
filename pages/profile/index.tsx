import { useAuth0 } from '@auth0/auth0-react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState } from 'react'
import DonationsChart from '../../components/profile/donations/donationsChart'
import DonationsTotals from '../../components/profile/donations/donationsTotal'
import DonationYearMenu from '../../components/profile/donations/yearMenu'
import { Layout } from '../../components/profile/layout'
import { useApi } from '../../hooks/useApi'
import { AggregatedDonations, DonationGraphData } from '../../models'
import { LayoutPage } from '../../types'
import style from "../../styles/Donations.module.css";
import DonationsDistributionTable from '../../components/profile/donations/donationsDistributionTable'

const Home: LayoutPage = () => {
  const { getAccessTokenSilently, user } = useAuth0();
  const [graphData, setGraphData] = useState<null | any[]>(null);
  const router = useRouter()

  const {loading, data, error} = useApi<AggregatedDonations[]>(
    `/donors/${user ? user["https://konduit.no/user-id"] : ""}/donations/aggregated`,
    "GET",
    "read:donations",
    getAccessTokenSilently,
  );

  if (loading || !data)
    return <></>

  const years = new Set<number>()
  data.forEach(el => years.add(el.year))

  const sum = data.reduce((acc, curr) => router.query.year === curr.year.toString() || !router.query.year ? acc + parseFloat(curr.value) : acc,0)

  const periodText = typeof router.query.year !== "undefined" ?
    `I ${router.query.year} har du gitt` :
    `Siden ${data.reduce((acc, curr) => curr.year < acc ? curr.year : acc, new Date().getFullYear())} har du gitt`

  let distribution: { org: string, sum: number }[] = []
  if (typeof router.query.year !== "undefined") {
    distribution = data
      .filter(el => el.year.toString() === router.query.year)
      .map(el => ({ org: el.organization, sum: parseFloat(el.value) }))
  } else {
    const summed = data
      .reduce((acc: { [key: string]: number }, curr) => {
        if (curr.organization in acc) {
          acc[curr.organization] += parseFloat(curr.value)
        } else {
          acc[curr.organization] = parseFloat(curr.value)
        }
        return acc
      }, { })
    
    for (const key in summed) {
      distribution.push({ org: key, sum: summed[key] })
    }
  }

  return (
    <>
      <Head>
        <title>Konduit. - Profil</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Donasjoner</h1>

      <DonationYearMenu years={Array.from(years)} selected={(router.query.year as string) || "total"} />

      <DonationsChart distribution={distribution}></DonationsChart>

      <div className={style.details}>
        <DonationsDistributionTable distribution={distribution}></DonationsDistributionTable>
        <DonationsTotals sum={sum} period={periodText} comparison={"Det er 234% sÃ¥ mye som en gjennomsnittlig giver"} />
      </div>
      {/* <Donations /> */}
    </>
  )
}

Home.layout = Layout
export default Home
